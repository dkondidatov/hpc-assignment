- name: 'Install : Download latest slurm package'
  become: true
  ansible.builtin.get_url:
    url: "{{ slurm_download_url }}"
    dest: "{{ slurm_temp_download_dir }}"
    owner: "slurm"
    group: "slurm"
    mode: '0644'
  when: not slurm_skip_installation

- name: 'Install : Unarchive slurm in "{{ slurm_temp_download_dir }}/{{ slurm_package_name }}"'
  become: true
  ansible.builtin.unarchive:
    src: "{{ slurm_temp_download_dir }}/{{ slurm_package_fullname }}"
    dest: "{{ slurm_temp_download_dir }}"
    owner: "slurm"
    group: "slurm"
  when: not slurm_skip_installation

- name: 'Clean-up : Remove package archive "{{ slurm_temp_download_dir }}/{{ slurm_package_fullname }}"'
  ansible.builtin.file: 
    name: "{{ slurm_temp_download_dir }}/{{ slurm_package_fullname }}"
    state: absent 
  ignore_errors: true
  when: not slurm_skip_installation

- name: 'Install : Run slurm configure script for master nodes'
  become: true
  ansible.builtin.shell:
  args:
    chdir: "{{ slurm_temp_download_dir }}/{{ slurm_package_name }}"
    cmd: "./configure --prefix={{ slurm_prefix }} {{ slurm_master_configure_args }}"
  when: not slurm_skip_installation and inventory_hostname in groups["hpc_master_nodes"]

- name: 'Install : Run slurm configure script for worker nodes'
  become: true
  ansible.builtin.shell:
  args:
    chdir: "{{ slurm_temp_download_dir }}/{{ slurm_package_name }}"
    cmd: "./configure --prefix={{ slurm_prefix }} {{ slurm_worker_configure_args }}"
  when: not slurm_skip_installation and inventory_hostname in groups["hpc_worker_nodes"]
  
- name: 'Install : Run slurm make script'
  become: true
  ansible.builtin.shell:
  args:
    chdir: "{{ slurm_temp_download_dir }}/{{ slurm_package_name }}"
    cmd: "make"
  when: not slurm_skip_installation

- name: 'Install : Run slurm make install script'
  become: true
  ansible.builtin.shell:
  args:
    chdir: "{{ slurm_temp_download_dir }}/{{ slurm_package_name }}"
    cmd: "make install"
  when: not slurm_skip_installation

- name: 'Install : Set parameters for "{{ slurm_config_dir }}"'
  become: true
  ansible.builtin.file:
    path: '{{ slurm_config_dir }}'
    state: directory
    mode: '0755'
    owner: slurm
    group: slurm

- name: 'Install : Set parameters for "{{ slurm_runstate_dir }}/slurm"'
  become: true
  ansible.builtin.file:
    path: '{{ slurm_runstate_dir }}/slurm'
    state: directory
    mode: '0750'
    owner: slurm
    group: slurm

- name: 'Install : Set parameters for "{{ slurm_spool_dir }}/slurmd"'
  become: true
  ansible.builtin.file:
    path: '{{ slurm_spool_dir }}/slurmd'
    state: directory
    mode: '0755'
    owner: slurm
    group: slurm

- name: 'Install : Set parameters for "{{ slurm_spool_dir }}/slurmctld"'
  become: true
  ansible.builtin.file:
    path: '"{{ slurm_spool_dir }}/slurmctld"'
    state: directory
    mode: '0755'
    owner: slurm
    group: slurm
  when: inventory_hostname in groups["hpc_master_nodes"]

- name: 'Install : Set parameters for "{{ slurm_logs_dir }}"'
  become: true
  ansible.builtin.file:
    path: '{{ slurm_logs_dir }}'
    state: directory
    mode: '0755'
    owner: slurm
    group: slurm

- name: 'Install : Template a slurm.conf to "{{ slurm_config_dir }}/cgroup.conf"'
  ansible.builtin.template:
    src: cgroup.conf.j2
    dest: '{{ slurm_config_dir }}/cgroup.conf'
    mode: '0644'
    owner: slurm
    group: slurm
  notify: 
    - 'Handlers : Restart systemd service: "slurmctld.service"'
    - 'Handlers : Restart systemd service: "slurmd.service"'

- name: 'Install : Template a slurm.conf to "{{ slurm_config_dir }}/slurm.conf"'
  ansible.builtin.template:
    src: slurm.conf.j2
    dest: '{{ slurm_config_dir }}/slurm.conf'
    mode: '0644'
    owner: slurm
    group: slurm
  notify: 
    - 'Handlers : Restart systemd service: "slurmctld.service"'
    - 'Handlers : Restart systemd service: "slurmd.service"'

- name: 'Install: Configure slurm for master node'
  block:

  - name: 'Install : Set parameters for "{{ slurm_config_dir }}/slurmdbd.conf"'
    become: true
    ansible.builtin.template:
      dest: '{{ slurm_config_dir }}/slurmdbd.conf'
      src: 'slurmdbd.conf.j2'
      mode: '600'
      owner: slurm
      group: slurm
    notify: 
    - 'Handlers : Restart systemd service: "slurmdbd.service"'

  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurmctld.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurmctld.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurmd.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurmd.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurmctld.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurmctld.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurm_jobacct.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurm_jobacct.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurm_jobcomp.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurm_jobcomp.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Set parameters for "{{ lustre_mount_path }}/slurm"'
    become: true
    ansible.builtin.file:
      path: '{{ lustre_mount_path }}/slurm'
      state: directory
      mode: '0777'
      owner: slurm
      group: slurm

  - name: 'Install : Copy systemd service: "slurmdbd.service"'
    become: true
    ansible.builtin.template:
      dest: '/lib/systemd/system/slurmdbd.service'
      src: 'slurmdbd.service.j2'
      mode: '0640'
      owner: slurm
      group: slurm
    notify: 
    - 'Handlers : Restart systemd service: "slurmdbd.service"'

  - name: 'Install : Copy systemd service: "slurmctld.service"'
    become: true
    ansible.builtin.template:
      dest: '/lib/systemd/system/slurmctld.service'
      src: 'slurmctld.service.j2'
      mode: '0640'
      owner: slurm
      group: slurm
    notify: 
    - 'Handlers : Restart systemd service: "slurmctld.service"'

  - name: 'Install : Start and enable slurmdbd daemon'
    become: true
    ansible.builtin.systemd_service:
      name: slurmdbd
      state: started
      daemon-reload: true
      enabled: true

  - name: 'Install : Start and enable slurmctld daemon'
    become: true
    ansible.builtin.systemd_service:
      name: slurmctld
      state: started
      daemon-reload: true
      enabled: true

  when: hostvars[inventory_hostname].master_node is defined and hostvars[inventory_hostname].master_node

- name: 'Install: Configure slurm for worker node'
  block:
  - name: 'Install : Set parameters for "{{ slurm_logs_dir }}/slurmd.log"'
    become: true
    ansible.builtin.file:
      path: '{{ slurm_logs_dir }}/slurmd.log'
      state: touch
      mode: '0640'
      owner: slurm
      group: slurm

  - name: 'Install : Template systemd service: "slurmd.service"'
    become: true
    ansible.builtin.template:
      dest: '/lib/systemd/system/slurmd.service'
      src: 'slurmd.service.j2'
      mode: '0640'
      owner: slurm
      group: slurm
    notify: 
    - 'Handlers : Restart systemd service: "slurmd.service"'

  - name: 'Install : Enable slurm daemon'
    become: true
    ansible.builtin.systemd_service:
      name: slurmd
      daemon-reload: true
      state: started
      enabled: true

  when: hostvars[inventory_hostname].worker_node is defined and hostvars[inventory_hostname].worker_node
